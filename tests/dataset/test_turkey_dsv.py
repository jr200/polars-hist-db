from datetime import datetime, timedelta
import pytest
import polars as pl
from polars.testing import assert_frame_equal
from decimal import Decimal

from polars_hist_db.config.transform_fn_registry import TransformFnRegistry
from polars_hist_db.dataset import run_datasets
from polars_hist_db.core.dataframe import DataframeOps, TimeHint
from polars_hist_db.utils import compare_dataframes
from ..utils.dsv_helper import (
    from_test_result,
    setup_fixture_dataset,
)

from .helpers import custom_try_to_usd


@pytest.fixture
def fixture_with_config():
    fn_reg = TransformFnRegistry()
    fn_reg.register_function("try_to_usd", custom_try_to_usd, allow_overwrite=True)

    yield from setup_fixture_dataset("foodprices.yaml")


@pytest.mark.asyncio
async def test_load_file(fixture_with_config):
    engine, base_config = fixture_with_config

    uploaded_dfs = []
    await run_datasets(
        base_config, engine, "turkey_food_prices_dsv", debug_capture_output=uploaded_dfs
    )

    uploaded_df = pl.concat([df for _, df in uploaded_dfs]).rename(
        {
            "ProductId": "product_id",
            "UmId": "um_id",
            "Price": "price",
            "time": "__valid_from",
        }
    )

    with engine.begin() as connection:
        unit_info_df = DataframeOps(connection).from_table("test", "unit_info")
        product_info_df = DataframeOps(connection).from_table("test", "product_info")
        food_prices_latest_df = DataframeOps(connection).from_table(
            "test", "food_prices"
        )
        food_prices_all_df = DataframeOps(connection).from_table(
            "test", "food_prices", TimeHint(mode="all")
        )
        food_prices_asof_df = DataframeOps(connection).from_table(
            "test",
            "food_prices",
            TimeHint(mode="asof", asof_utc=datetime(2015, 3, 31)),
        )

        food_prices_t1_t2_df = DataframeOps(connection).from_table(
            "test",
            "food_prices",
            TimeHint(
                mode="span",
                asof_utc=datetime(2015, 4, 1),
                history_span=timedelta(days=15),
            ),
        )

    assert len(uploaded_df) == 3042
    latest_uploaded_df = uploaded_df.unique(
        subset=["product_id", "um_id"], maintain_order=True, keep="last"
    )
    assert len(latest_uploaded_df) == 52

    diff_df, missing_cols = compare_dataframes(
        food_prices_latest_df,
        latest_uploaded_df,
        on=["product_id", "um_id", "__valid_from"],
    )

    # in the dataset, theres are 6 instances of the *latest* price staying the same
    # across the last date change
    #  LHS: the database __valid_from will hold the date where the price first changed
    #  RHS: latest_uploaded_df will hold the date where the price last changed
    # so there will be 14 instances of different rows in total
    assert len(diff_df) == 12

    assert missing_cols == [
        "missing:ProductName_lhs",
        "missing:UmName_lhs",
        "missing:__valid_to_rhs",
    ]

    diff_df, missing_cols = compare_dataframes(
        uploaded_df,
        food_prices_all_df,
        on=["product_id", "um_id", "__valid_from"],
    )

    unique_diffs = diff_df.select("product_id", "um_id").unique()

    # in the dataset, theres are 44 instances of a historic price staying the same
    # across consecutive date changes
    assert len(diff_df) == 195
    assert len(unique_diffs) == 44

    dataset = base_config.datasets["turkey_food_prices_dsv"]

    expected_unit_info_df = from_test_result(
        """
    UmId,UmName
    5,KG
    15,L
    33,Unit
    51,Day
    55,Course
    90,12 KG
    100,Cubic meter
    101,kWh
    102,Package
    """,
        "unit_info",
        base_config.tables,
        dataset,
    )

    assert_frame_equal(unit_info_df, expected_unit_info_df)

    expected_product_info_df = from_test_result(
        """
        ProductId,ProductName
        52,Rice - Retail
        58,Wheat flour - Retail
        66,Beans (white) - Retail
        83,Potatoes - Retail
        92,Eggs - Retail
        94,Meat (chicken) - Retail
        97,Sugar - Retail
        105,Garlic - Retail
        108,Lentils - Retail
        112,Pasta - Retail
        114,Tomatoes - Retail
        119,Groundnuts (shelled) - Retail
        124,Bread (common) - Retail
        151,Coffee - Retail
        173,Onions - Retail
        176,Tea (green) - Retail
        181,Cabbage - Retail
        183,Meat (mutton) - Retail
        184,Oil (sunflower) - Retail
        185,Salt - Retail
        209,Coffee (instant) - Retail
        212,"Peas (green, dry) - Retail"
        229,Apples (red) - Retail
        231,Cauliflower - Retail
        233,Cucumbers (greenhouse) - Retail
        239,Oil (olive) - Retail
        244,Chickpeas - Retail
        254,Bananas - Retail
        258,Bulgur - Retail
        281,Tea - Retail
        285,Fuel (petrol-gasoline) - Retail
        304,Transport (public) - Retail
        317,Tomatoes (paste) - Retail
        341,Fuel (gas) - Retail
        345,Apples - Retail
        360,Oranges - Retail
        364,Yogurt - Retail
        384,Bread (pita) - Retail
        388,Cucumbers - Retail
        401,Fish (fresh) - Retail
        404,Spinach - Retail
        414,Cheese - Retail
        433,Meat (veal) - Retail
        434,Eggplants - Retail
        442,"Milk (powder, infant formula) - Retail"
        450,Zucchini - Retail
        463,Milk (pasteurized) - Retail
        465,"Wage (non-qualified labour, non-agricultural) - Retail"
        491,Electricity - Retail
        492,Tea (herbal) - Retail
        493,Water - Retail
        502,Cocoa (powder) - Retail
        """,
        "product_info",
        base_config.tables,
        dataset,
    )

    assert_frame_equal(product_info_df, expected_product_info_df)

    expected_food_prices_latest_df = from_test_result(
        """
        ProductId,UmId,Price,price_usd,__valid_from,__valid_to
        52,5,10.2803,1.8099,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        58,5,4.2703,0.7518,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        66,5,13.0975,2.3059,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        83,5,2.0924,0.3684,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        92,33,0.6301,0.1109,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        94,5,11.7723,2.0726,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        97,5,5.5038,0.9690,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        105,5,38.4497,6.7693,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        108,5,7.5267,1.3251,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        112,5,4.9827,0.8772,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        114,5,4.7359,0.8338,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        119,5,33.0362,5.8162,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        124,5,5.9795,1.0527,2019-11-01T00:00:00.000000,2106-02-07T06:28:15.999999
        151,5,51.5925,9.0832,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        173,5,2.2126,0.3895,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        176,33,4.6500,1.2754,2017-03-01T00:00:00.000000,2106-02-07T06:28:15.999999
        181,5,1.4376,0.2531,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        183,5,59.2274,10.4274,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        184,15,10.8694,1.9136,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        185,5,2.7772,0.4889,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        209,33,51.1247,9.0008,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        212,5,3.2900,1.2078,2015-06-01T00:00:00.000000,2106-02-07T06:28:15.999999
        229,5,2.8300,0.7762,2017-03-01T00:00:00.000000,2106-02-07T06:28:15.999999
        231,5,2.7437,0.4830,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        233,5,4.2400,1.1629,2017-03-01T00:00:00.000000,2106-02-07T06:28:15.999999
        239,15,30.1293,5.3045,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        244,5,9.2749,1.6329,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        254,5,9.8327,1.7311,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        258,5,5.0640,0.8915,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        281,5,35.1895,6.1953,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        285,15,6.9867,1.2301,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        304,55,3.6964,0.6508,2019-11-01T00:00:00.000000,2106-02-07T06:28:15.999999
        317,5,10.8901,1.9173,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        341,90,109.1172,19.2108,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        345,5,4.2447,0.7473,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        360,5,3.9023,0.6870,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        364,5,7.4009,1.3030,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        384,5,2.4800,0.6802,2017-01-01T00:00:00.000000,2106-02-07T06:28:15.999999
        388,5,5.0299,0.8855,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        401,5,27.8747,4.9075,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        404,5,2.5628,0.4512,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        414,5,35.5297,6.2552,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        433,5,48.0534,8.4601,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        434,5,3.9435,0.6943,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        442,5,147.1558,25.9077,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        450,5,4.3735,0.7700,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        463,15,5.1285,0.9029,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        465,51,46.8000,12.8360,2017-01-01T00:00:00.000000,2106-02-07T06:28:15.999999
        491,101,0.7102,0.1250,2019-10-01T00:00:00.000000,2106-02-07T06:28:15.999999
        492,102,5.8147,1.0237,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        493,100,5.0664,0.8920,2019-07-01T00:00:00.000000,2106-02-07T06:28:15.999999
        502,5,51.6071,9.0858,2019-12-01T00:00:00.000000,2106-02-07T06:28:15.999999
        """,
        "food_prices",
        base_config.tables,
        dataset,
        schema_overrides={"price_usd": pl.Decimal(10, 4)},
    )

    diff_df, missing_cols = compare_dataframes(
        food_prices_latest_df,
        expected_food_prices_latest_df,
        on=["product_id", "um_id"],
    )
    assert diff_df.is_empty()
    assert len(missing_cols) == 0

    expected_food_prices_asof_df = from_test_result(
        """
        ProductId,UmId,Price,price_usd,__valid_from,__valid_to
        52,5,6.5170,2.3924,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        58,5,2.6460,0.9714,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        66,5,7.4420,2.7320,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        92,33,0.3460,0.1270,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        94,5,6.8600,2.5184,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        97,5,3.7030,1.3594,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        105,5,11.1810,4.1046,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        108,5,5.3230,1.9541,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        112,5,2.9930,1.0988,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        114,5,2.2510,0.8264,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        119,5,15.9100,5.8407,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        124,5,2.9580,1.0859,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        151,5,31.9170,11.7170,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        173,5,1.7000,0.6241,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        176,33,4.1710,1.5312,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        181,5,1.3180,0.4838,2015-03-01T00:00:00.000000,2015-11-01T00:00:00.000000
        183,5,25.9070,9.5106,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        184,15,6.5410,2.4012,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        185,5,1.4980,0.5499,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        209,33,29.7850,10.9343,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        212,5,2.4988,1.1420,2014-06-01T00:00:00.000000,2015-04-01T00:00:00.000000
        229,5,2.2770,0.8359,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        231,5,3.2320,1.1865,2015-03-01T00:00:00.000000,2015-11-01T00:00:00.000000
        233,5,2.6240,0.9633,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        239,15,20.3560,7.4728,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        244,5,5.4400,1.9971,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        254,5,5.2760,1.9369,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        258,5,2.6620,0.9772,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        281,5,19.1710,7.0378,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        360,5,1.6420,0.6028,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        401,5,13.8730,5.0929,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        433,5,30.6840,11.2643,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        463,15,2.8410,1.0430,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        502,5,37.2000,13.6564,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
    """,
        "food_prices",
        base_config.tables,
        dataset,
        schema_overrides={"price_usd": pl.Decimal(10, 4)},
    )

    # (
    #     food_prices_latest_df
    #     .join(expected_food_prices_latest_df, on=["product_id", "um_id"])
    #     .with_columns(diff=(pl.col("price")-pl.col("price_right")).abs())
    #     .sort("diff")
    # )

    diff_df, missing_cols = compare_dataframes(
        food_prices_asof_df, expected_food_prices_asof_df, on=["product_id", "um_id"]
    )
    assert diff_df.is_empty()
    assert len(missing_cols) == 0

    expected_food_prices_t1_t2_df = from_test_result(
        """
        ProductId,UmId,Price,price_usd,__valid_from,__valid_to
        52,5,6.5170,2.3924,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        52,5,6.5400,2.4009,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        58,5,2.6460,0.9714,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        58,5,2.6300,0.9655,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        66,5,7.4420,2.7320,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        66,5,7.4700,2.7423,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        92,33,0.3460,0.1270,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        92,33,0.3200,0.1175,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        94,5,6.8600,2.5184,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        94,5,6.9600,2.5551,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        97,5,3.7030,1.3594,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        97,5,3.7100,1.3620,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        105,5,11.1810,4.1046,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        105,5,12.4900,4.5852,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        108,5,5.3230,1.9541,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        108,5,5.7300,2.1035,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        112,5,2.9930,1.0988,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        112,5,2.9700,1.0903,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        114,5,2.2510,0.8264,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        114,5,2.7500,1.0095,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        119,5,15.9100,5.8407,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        119,5,16.9800,6.2335,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        124,5,2.9580,1.0859,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        124,5,2.9200,1.0720,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        151,5,31.9170,11.7170,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        151,5,34.9000,12.8120,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        173,5,1.7000,0.6241,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        173,5,1.7400,0.6388,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        176,33,4.1710,1.5312,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        176,33,4.1600,1.5272,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        181,5,1.3180,0.4838,2015-03-01T00:00:00.000000,2015-11-01T00:00:00.000000
        183,5,25.9070,9.5106,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        183,5,26.3100,9.6586,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        184,15,6.5410,2.4012,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        184,15,6.6100,2.4266,2015-04-01T00:00:00.000000,2015-06-01T00:00:00.000000
        185,5,1.4980,0.5499,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        185,5,1.4800,0.5433,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        209,33,29.7850,10.9343,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        209,33,29.7400,10.9178,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        212,5,2.4988,1.1420,2014-06-01T00:00:00.000000,2015-04-01T00:00:00.000000
        212,5,3.4100,1.2518,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        229,5,2.2770,0.8359,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        229,5,2.4500,0.8994,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        231,5,3.2320,1.1865,2015-03-01T00:00:00.000000,2015-11-01T00:00:00.000000
        233,5,2.6240,0.9633,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        233,5,2.0600,0.7562,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        239,15,20.3560,7.4728,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        239,15,21.4000,7.8561,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        244,5,5.4400,1.9971,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        244,5,5.5400,2.0338,2015-04-01T00:00:00.000000,2015-06-01T00:00:00.000000
        254,5,5.2760,1.9369,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        254,5,5.7800,2.1219,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        258,5,2.6620,0.9772,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        258,5,2.6900,0.9875,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        281,5,19.1710,7.0378,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        281,5,19.4200,7.1292,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        360,5,1.6420,0.6028,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        360,5,2.2700,0.8333,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        401,5,13.8730,5.0929,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        401,5,14.1100,5.1799,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        433,5,30.6840,11.2643,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        433,5,31.3700,11.5162,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        463,15,2.8410,1.0430,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        463,15,2.8300,1.0389,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
        502,5,37.2000,13.6564,2015-03-01T00:00:00.000000,2015-04-01T00:00:00.000000
        502,5,36.9200,13.5536,2015-04-01T00:00:00.000000,2015-05-01T00:00:00.000000
    """,
        "food_prices",
        base_config.tables,
        dataset,
        schema_overrides={"price_usd": pl.Decimal(10, 4)},
    )

    diff_df, missing_cols = compare_dataframes(
        food_prices_t1_t2_df,
        expected_food_prices_t1_t2_df,
        on=["product_id", "um_id", "__valid_to"],
    )
    assert diff_df.is_empty()
    assert len(missing_cols) == 0

    assert len(food_prices_all_df) == 2847
    assert food_prices_all_df["price"].sum() == Decimal("42340.0550")
    assert food_prices_all_df["product_id"].sum() == 677711
    assert food_prices_all_df["um_id"].sum() == 32177

    assert True
